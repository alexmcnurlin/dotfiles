" ###Settings For Vanilla VIM 
" vim: fdm=manual
" This should be at ~/.vimrc.local
" For files that source this file, check ~/.vimrc or ~/.config/nvim/init.vim



" Disable mouse
set mouse=c

" These are to set options that I liked from spf13-vim
" set t_Co=256
let g:mapleader=' '                   " Sets the <leader> to space
set number                            " Enables line numbering
set wildmode=longest,list,full        " Sets desired file completion from command mode
set wildmenu                          " Sets desired file completion from command mode
set hlsearch                          " Highlights all matches when searching 
set clipboard=unnamedplus             " Tells Gvim to use the system clipboard
set incsearch                         " Sets encremental search. Search results will be shown as you type
set ignorecase                        " Disables case sensitivity in searches. Required for smartcase
set smartcase                         " Enables smartcase for searching
set spell spelllang=en_us             " Enables spell checking
set nobackup                          " Disables backup files (those ending in ~)
set noswapfile                        " Disables swap files (those ending in .swp)
set autoindent                        " Will automatically indent text
set autochdir
vnoremap < <gv|                      " Indenting lines in visual mode keeps the selection. The pipe allows comments
vnoremap > >gv|                      " Indenting lines in visual mode keeps the selection. The pipe allows comments
nnoremap Y yg_|                      " Yanks the rest of the line
nmap j gj|                           " Makes j move across displayed lines, not physical lines. Useful when wordwrap is on
nmap k gk|                           " Makes k move across displayed lines, not physical lines. Useful when wordwrap is on

" Makes a different colored background at 80 characters
set colorcolumn=80 " Set softwrap

" Line wrap
" I'm going to see how I like not having linebreaks
" I didn't like not having linebreaks
set wrap
set linebreak
set nolist

" This is actually set in ~/.vimrc after the colorscheme declaration
" highlight ColorColumn ctermbg=236 guibg=#202326

" Custom highlight options
" highlight customBlue guifg=26 

" When lines are softwrapped, indentation is preserved.
" HOW DID I NOT KNOW ABOUT THIS SOONER!!!
set breakindent

" Reverses the meaning of /g in a regex, making g be set by defalut
" E.g.
" %s/foo/bar/ will now replace all instances of foo with bar
" %s/foo/bar/g will now replace only the first instance
set gdefault

" Fold settings
set foldmethod=indent  " Will create folds for indented text
set foldopen-=block    " Navigating using `[` and `]` (among others) won't open folds
set foldminlines=0     " One indented line by itself will still be foldled
set foldignore-=#      " Lines with a `#` will still be folded

" Changes the time needed to chain keys together for a mapping
set timeoutlen=500
set ttimeoutlen=50

" Change tab width"
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

" Make command line file completion be case insensitive
set wildignorecase

" Set relative line numbering
set relativenumber

" Set guioptions
" T Removes tabline
set guioptions+=r " Removes scrollbar
set guioptions+=m " Removes menu bar
set guioptions+=T " Removes GTK toolbar
set guioptions+=e " Uses the terminal tabline (currently powerline) instead of GTK tabline
set guioptions+=c " Uses status line instead of dialog popup for things like file changes.
set showtabline=2 " Always show tabline

" Keep cursor in the middle of the screen
" I'm disbling this for now, I'm testing a different value
"set so=100
set so=10

" Highlights the line the cursor is on. 
set nocursorline
set cursorline

" Doens't redraw the screen during a macro execution
set lazyredraw

" Omni completion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" Fixes bugs caused by mapping Enter to controlling folds
" autocmd CmdwinEnter * nnoremap <CR> <CR>
" autocmd BufReadPost quickfix nnoremap <CR> <CR>

" Saves the current file when you switch out of the window
au FocusLost * silent! w



" ###General Key Mappings



" This is to prevent me from mistyping Po as PO. requires Nyancat plugin
"imap PO <Esc>:tabnew \| :Nyancat<CR> 
" imap teh <Esc>:tabnew \| :Nyancat<CR> 
" imap ednl <Esc>:tabnew \| :Nyancat<CR> 

cmap <c-j> <down>
cmap <c-k> <up>

vnoremap * y/<C-R>"<CR>
vnoremap # y?<C-R>"<CR>

" Maps single quote to backtick. If this messes up anything, just uncomment the below line.
"noremap '' ``
noremap ' `

" switches to the most recently closed file
noremap '" :e#<CR>

"nmap <leader>= :Autoformat<CR>

nmap <leader>& s&amp;<Esc>
imap ,& &amp;

" Control backspace will delete the current word
imap <c-bs> <c-w>

" Backspace deletes line, Shift Backspace deletes contents without deleting line
noremap <BS> dd
noremap <S-BS> zc

" Using enter to manage folds. Very convenient with foldmethod=indnent
" nnoremap <Enter> zo
" nnoremap <S-Enter> zc

" This doesn't seem to be working...
" But it worked when I added it, I promise!
imap <S-Enter> <Enter><Esc>kA


"nnoremap <S-Tab> <c-o>
" Navigates the changelist
nnoremap <Tab> <C-I> " Ctrl-I is already tab, but keeping this for completeness
nnoremap <S-Tab> <C-O>

nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT

" Navigate jumplist
nnoremap g. g;

"nnoremap <C-Tab> g,|     " Navigate changelist
"nnoremap <S-Tab>g;|    " Navigate changelist

" Capitalizes the beginning of the current word
nmap cu mub~`u
imap ,cu <esc>mub~`ua


function Replace(options)
  call inputsave()
  let l:wordUnderCursor = expand("<cword>")
  let l:input = input('Enter new variable name: ')
  "echom l:wordUnderCursor
  "echom l:input
  "echom a:options
  execute "%s/\\<" . l:wordUnderCursor . "\\>/" . l:input . "/" . a:options
  call inputrestore()
endfunction
nnoremap <leader>c :call Replace("g")<CR>
nnoremap <leader><leader>c :call Replace("gc")<CR>


function Search()
  call inputsave()
  let l:input = input('Search current directory for: ')
  execute "Ack " . l:input
  call inputrestore()
endfunction
nmap <leader><leader>s :call Search()<CR>


" Force changes the current directory. 
" The should be unnecessary with 'yssl/AutoCWD.vim'
nmap <leader>e :lcd %:p:h<CR>

" 
nmap <leader><leader>e :!sudo chmod a+x %<CR>

" Sets F to use the easymotion 'f' motion.
" Requires 'easymotion/vim-easymotion'
nmap F <Plug>(easymotion-bd-f)
omap F <Plug>(easymotion-bd-f)
vmap F <Plug>(easymotion-bd-f)

nnoremap <leader>F :%!python -m json.tool

" Goes to the file under cursor, but creates it if it doesn't exist
nnoremap gF :edit <cfile><cr>

" Highlights the previously pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Highlights the previously selected test
nnoremap gv vgv

nmap <leader>h :noh<CR>
imap ,h <c-o>:noh<CR>

" L and H will cycle through tabs
nnoremap L gt 
nnoremap H gT

nnoremap <leader>m :make!<CR>

nmap <leader><leader>d /\(\s\$\(\) \)\@<=.*$<CR>
nmap <leader><leader>h /\(\s-\(\) \)\@<=.\+$<CR>
nmap <leader><leader>o /\(\s\!\(\) \)\@<=.*$<CR>

" Enables indent guides on startup, even though they should already be on, and 
" creates a keyboard shortcut for it.
" Requires Indent Guides plugin
nmap <leader><leader>i :IndentGuidesEnable<CR>
let g:indent_guides_enable_on_vim_startup = 1

" Takes the current line and enters it into vim command line. Useful for
  " editing vimrc
        " The second one will take the line and pass it on to a shell
      nmap <leader>s yy:<c-r>"<BS><CR>
    nmap <leader>! ^g_:!<c-r>"

" Saves the current file as root
" This doesn't work consistently
command Sudow :w !sudo tee %<CR>L

" unmap <leader>jt
nmap <leader>j i<CR><Esc>

" Control-v works in command mode now
cmap <c-v> <c-r>"


nmap <leader>t :tabnew

" Opens the previous file in a new tab
noremap <leader>T :tabnew#<CR>

" Makes U redo
nmap U <c-r>

imap qq <Esc>

" Add 2 functions to automatically manage your tags file for ctags
" taken from http://vim.wikia.com/wiki/Autocmd_to_update_ctags_file
" sudo apt-get install ctags
function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
  let resp = system(cmd)
endfunction

function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let cmd = 'ctags -a -f ' . tagfilename . ' --c++-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
  call DelTagOfFile(f)
  let resp = system(cmd)
endfunction
autocmd BufWritePost *.cpp,*.h,*.c call UpdateTags()

set tags=~/flowcontroller/mytags


" ,s will find the last misspelled word and change it to the first suggested 
" spell correction
" imap <leader><leader>s <esc>mm[sz=1<Enter>`ma

nmap <leader>z z=1

nmap <leader>1 :colorscheme hybrid<CR>
nmap <leader>2 :colorscheme PaperColor<CR>
nmap <leader>3 :colorscheme solarized<CR>
nmap <leader>4 :colorscheme phd<CR>
nmap <leader>5 :colorscheme twilight<CR>
nmap <leader>6 :colorscheme gruvbox<CR>

" A function that toggles between light and dark themes
function! ColorToggle()
  if &background ==? 'dark'
    let &background = 'light'
  else 
    let &background = 'dark'
  endif
endfunction
nmap <leader>` :call ColorToggle()<CR>



" ###Filetype Specific Settings



"au BufRead,BufNewFile java  nnoremap <leader><leader>c  :w \| :!javac %:t;java %:t:r<CR> 
"au BufRead,BufNewFile java  nnoremap <leader><leader>ca :w \| :!javac %:t;java %:t:r 
"au BufRead,BufNewFile *.py  nnoremap <leader><leader>c  :w \|:cd %:p:h \|:!./%<CR>
"au BufRead,BufNewFile *.py  nnoremap <leader><leader>ca :w \|:cd %:p:h \|:!./%
"au BufRead,BufNewFile *.cpp nnoremap <leader><leader>c  :w \|:cd %:p:h \|:!g++ % -o %:t:r; ./%:t:r<CR>
"au BufRead,BufNewFile *.cpp nnoremap <leader><leader>ca :w \|:cd %:p:h \|:!g++ % -o %:t:r; ./%:t:r
"au BufRead,BufNewFile *.php nnoremap <leader><leader>c  :w \|:cd %:p:h \|:!php %<CR>
"au BufRead,BufNewFile *.php nnoremap <leader><leader>ca :w \|:cd %:p:h \|:!php %
"au BufRead,BufNewFile *.tex nnoremap <leader><leader>c  :w \|:cd %:p:h \|:!php %<CR>
"au BufRead,BufNewFile *.tex nnoremap <leader><leader>r  :w \|:cd %:p:h \|:!pdflatex %; evince %:r.pdf<CR>
"au BufRead,BufNewFile *.sh nnoremap <leader><leader>c :w \|:cd %:p:h \|sh %<CR>
"au BufRead,BufNewFile *.sh nnoremap <leader><leader>ca :w \|:cd %:p:h \|sh %



" ###Plugin Settings 



"Easymotion
" Enables Smartcase
let g:EasyMotion_smartcase=1

if has('nvim')
  let g:deoplete#enable_at_startup = 1
else
  " Neocomple 
  let g:neocomplete#enable_at_startup=1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
endif
set completeopt-=preview              " This removes a bug where a split window would randomly pop up in some situations
" Prevents a popup from preventing you from using Enter
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

if has('nvim')
  " Utilsnips
  let g:UltiSnipsExpandTrigger="<c-k>"
  let g:UltiSnipsJumpForwardTrigger="<c-l>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  let g:UltiSnipsSnippetsDir="/home/joe/.dotfiles/vim/ultisnips/"
  let g:UltiSnipsSnippetDirectories=["/home/joe/.dotfiles/vim/ultisnips/"]
elseif
  " Neosnippet
  imap <C-k>     <Plug>(neosnippet_jump_or_expand)
  smap <C-k>     <Plug>(neosnippet_jump_or_expand)
  imap <C-L>     <Plug>(neosnippet_expand_or_jump)
  smap <C-L>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  command ReloadSnippets call neosnippet#variables#set_snippets({})
  let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets'
  autocmd BufWritePost *.snip,*.snippets
        \ call neosnippet#variables#set_snippets({})
endif

" Vim Autoclose
" I hacked the plugin to make this never autoclose double quotes.
" I don't use this plugin anymore
let g:autoclose_vim_commentmode = 1

" Vim AutoPairs. This disables autocomplete from double quotes
let g:AutoPairs={'(':')', '[':']', '{':'}',"'":"'", '`':'`',}
let g:AutoPairsMultilineClose=0

" undotree
nnoremap <leader>u :UndotreeToggle<cr>
set undodir=$HOME/.vim/.undodir
set undofile
set undolevels=1000
set undoreload=10000

" When a buffer is loaded, this detects the current indent settings and
" adjusts accordingly.
" Requires 'ciaranm/detectindent'
au BufReadPost * :DetectIndent
let g:detectindent_preferred_indent = 4

" Powerline
set laststatus=2

" Mappings to navigate by indentation.
" Requires 'jeetsukumaran/vim-indentwise'
map - <Plug>(IndentWisePreviousLesserIndent)
" map = <Plug>(IndentWiseNextGreaterIndent)
map \ <Plug>(IndentWiseNextEqualIndent)
map \| <Plug>(IndentWisePreviousEqualIndent)
map + <Plug>(IndentWisePreviousGreaterIndent)
map _ <Plug>(IndentWiseNextLesserIndent)

" Supposed to change the current directory. Let's see if this works
" Requires 'yssl/AutoCWD.vim'
" This one actually works
let g:autocwd_patternwd_pairs = [
  \['*', '%:p:h' ]
\]

" Gitgutter
" Requires 'airblade/vim-gitgutter'
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '-'

" Airline configuration options
" Requires 'bling/vim-airline'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#fnamemod = ':t'


if has('nvim')
  " Ale configuration
  " Requires 'w0rp/ale'
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '⊗'
  let g:ale_sign_warning = '⊙'
  let g:airline#extensions#ale#enabled = 1
else
  " Syntastic configuration options
  " Requires 'scrooloose/syntastic'
  let g:sytastic_check_on_wq=0
  let g:syntastic_error_symbol = '⊗'
  let g:syntastic_warning_symbol = '⊙'
  let g:syntastic_vim_checkers = ['vint']
  let g:syntastic_python_checkers = ['flake8', 'pylint']
  let g:syntastic_php_checkers=['php', 'phpcs']
  let g:syntastic_php_phpcs_args='--standard=PSR2 -n'
  let g:syntastic_always_populate_loc_list=1

  " Adds c++11 support
  let g:syntastic_cpp_compiler_options = ' -std=c++11'
endif


" Configuration for vim-unimpaired
" Requires 'tpope/vim-unimpaired'
nmap [l <Plug>unimpairedMoveUp
nmap ]l <Plug>unimpairedMoveDown
xmap [l <Plug>unimpairedMoveSelectionUp
xmap ]l <Plug>unimpairedMoveSelectionDown

nmap [e :lprev<CR>
nmap ]e :lnext<CR>

" Makes f and t become case insensitive
" Requires 'dahu/vim-fanfingtastic'
let g:fanfingtastic_ignorecase=1

" Adds mapping to open ctrl-p in the home directory
nmap <leader>p :CtrlP<space>~<CR>

" Tells Ack.vim to use ag, rather than ack for searching.
" requires that `ag` be installed, of course
" Requires 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Used in an effort to get syntax highlighting to work better
" Requires 'hdima/python-syntax'
let python_highlight_all = 0
let pyton_highlight_indentation_errors = 1
let python_highlight_builtin_funcs = 0

" Bindings for XPtemplate, a more powerful snippet engine
" Requires 'drmingdrmer/xptemplate'
let g:xptemplate_key = '<C-l>'
let g:xptemplate_nav_next = '<C-k>'
imap <C-\> <C-r><C-l>

" Settings for SimplyFold, a python folding plugin
" Requires 'tmhedberg/SimplyFold'
let g:SimpylFold_docstring_preview = 1

" Settings for YouCompleteMe, a completion plugin
" Requires 'Valloric/YouCompleteMe'
" nnoremap <leader>g :YcmCompleter GoToDeclaration<CR>
" let g:ycm_key_list_select_completion = ['<Down>']


let giutablabel='%t'

let g:behaveyourself_step_path = '/home/joe/flowcontroller/flowcontroller/test/features/steps/'
function! BehaveYourself()
python3 << EOF
import vim
from behave_yourself import find

my_line = vim.current.line
step_directory = vim.eval('g:behaveyourself_step_path')
results = find(text=my_line, step_directory=step_directory)
if results:
  filename, start_line, end_line = results[0]
  vim.command('tab drop {} | go {}'.format(filename, start_line+1))
else:
  print("No file found")

EOF
endfunction


let g:feature_file_path = '/home/joe/flowcontroller/flowcontroller/test/features/'
function! Goto_feature()
python3 << EOF
import vim
from re import sub
from os.path import isfile, splitext, basename

filename = vim.current.buffer.name
step_file_base = basename(filename)
step_file_head = splitext(step_file_base)[0]
if step_file_head == filename:
  print("'{}' is not a python file".format(filename))
else:
  feature_file_head = step_file_head.upper()
  feature_path = vim.eval('g:feature_file_path')
  feature_file_full = "{}{}.feature".format(feature_path, feature_file_head)
  if not isfile(feature_file_full):
    print("'{}' not an existing file".format(feature_file_full))
  else:
    vim.command("tab drop {}".format(feature_file_full))
EOF
endfunction

nmap <leader>k :call BehaveYourself()<CR>
nmap <leader>K :call Goto_feature()<CR>

" Enable Rainbow H
let g:rainbow_active = 1

if has('nvim')
  source ~/.nvimrc
endif
